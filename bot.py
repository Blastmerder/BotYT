from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import os
from download import *
import shutil
import re
import asyncio
import json

last = ""


def clear_folder(folder_path):
    for filename in os.listdir(folder_path):
        file_path = os.path.join(folder_path, filename)
        try:
            if os.path.isfile(file_path) or os.path.islink(file_path):
                os.unlink(file_path)  # –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É
            elif os.path.isdir(file_path):
                os.rmdir(file_path)  # –£–¥–∞–ª—è–µ—Ç –ø—É—Å—Ç—É—é –ø–∞–ø–∫—É
        except Exception as e:
            print(f'–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}. –ü—Ä–∏—á–∏–Ω–∞: {e}')
clear_folder('./cash')

with open('token.json', 'r', encoding='UTF-8') as token:
    BOT_TOKEN = json.load(token)["token"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —ç—Ö–æ-–±–æ—Ç. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –ø–æ–≤—Ç–æ—Ä—é!\n–ò—Å–ø–æ–ª—å–∑—É–π /audio –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º—É–∑—ã–∫–∏")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text
    await update.message.reply_text(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ!")

    loop = asyncio.get_event_loop()
    mp3_file = await loop.run_in_executor(None, download_music, url)

    await update.message.reply_text(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª")

    if os.path.exists(mp3_file):
        print("File found.")

        await context.bot.send_audio(
                chat_id=update.effective_chat.id,
                audio=open(mp3_file, 'rb'),
                read_timeout=180,
                write_timeout=180
            )


def download_music(url):
    data = get_data(url)

    title = re.sub(r'[\\/*?,:"<>|]', '', data['title'])
    title = re.sub(r'\s+', '_', title)
    mp3_file = f"./cash/{title}.mp3"
    last = mp3_file

    download_audio(url, "./cash/", title)
    thumbnail = get_thumbnail(data["thumbnail_url"])
    set_metadata(mp3_file, data["title"], data["author"], thumbnail)

    os.remove(thumbnail)

    return mp3_file 

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ
async def send_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:

        if os.path.exists(AUDIO_PATH):
            await context.bot.send_audio(
                chat_id=update.effective_chat.id,
                audio=open(AUDIO_PATH, 'rb'),
                title="–ü—Ä–∏–º–µ—Ä –∞—É–¥–∏–æ",
                performer="–ú–æ–π –±–æ—Ç"
            )
        else:
            await update.message.reply_text("–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω üòû")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"Update {update} caused error {context.error}")

if __name__ == "__main__":
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("audio", send_audio))  # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error)
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling(poll_interval=3)
